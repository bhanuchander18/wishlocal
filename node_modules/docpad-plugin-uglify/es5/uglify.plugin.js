// Generated by CoffeeScript 1.12.5
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = function(BasePlugin) {
  var UglifyPlugin;
  return UglifyPlugin = (function(superClass) {
    extend(UglifyPlugin, superClass);

    UglifyPlugin.prototype.name = 'uglify';

    UglifyPlugin.prototype.config = {
      environments: {
        development: {
          enabled: false
        }
      }
    };

    function UglifyPlugin() {
      UglifyPlugin.__super__.constructor.apply(this, arguments);
      this.UglifyJS = require('uglify-js');
      this;
    }

    UglifyPlugin.prototype.renderDocument = function(opts, next) {
      var config, content, err, extension, file, key, result, uglifyOpts, value;
      config = this.getConfig();
      extension = opts.extension, file = opts.file, content = opts.content;
      uglifyOpts = file.get('uglify');
      if (extension === 'js' && file.type === 'document' && uglifyOpts) {
        if (typeof uglifyOpts === 'boolean') {
          uglifyOpts = {};
        }
        uglifyOpts.fromString = true;
        for (key in config) {
          if (!hasProp.call(config, key)) continue;
          value = config[key];
          if (key !== 'environments') {
            if (uglifyOpts[key] == null) {
              uglifyOpts[key] = value;
            }
          }
        }
        try {
          result = this.UglifyJS.minify(content, uglifyOpts);
          opts.content = result.code;
        } catch (error) {
          err = error;
          return next(err);
        }
      }
      return next();
    };

    return UglifyPlugin;

  })(BasePlugin);
};
